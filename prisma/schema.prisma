// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projectIds     String[]  @db.ObjectId

  account   Account[]
  Task      Task?     @relation(fields: [taskId], references: [id])
  taskId    String?   @db.ObjectId
  Project   Project?  @relation(fields: [projectId], references: [id])
  projectId String?   @db.ObjectId
}

model Project {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  dueAt       DateTime?
  status      String    @default("Not Started")
  creatorId   String    @db.ObjectId
  userIds     String[]  @db.ObjectId

  Task Task[]
  User User[]
}

model Task {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  status        String?   @default("Not Started")
  recurring     Boolean?  @default(false)
  recurringType String? //it could either be daily, weekly or motnhly
  recurringDate DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  dueAt         DateTime?

  project    Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String?  @db.ObjectId
  assignedTo User[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
